<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="kr.or.ssff.mapper.StudyMapper">

    <!--insert문-->
    <delete id="deleteTag">
        DELETE
        FROM LANG
        WHERE R_IDX = #{r_idx}
    </delete>

    <!--  게시판 목록 조회-->
    <insert id="insert">
        <selectKey keyProperty="r_idx" order="BEFORE" resultType="int">
            SELECT RECRUIT_BOARD_SQE.NEXTVAL
            FROM dual
        </selectKey>
        INSERT INTO RECRUIT_BOARD (
        r_idx,member_name,type_pc,
        title,teamname,cont,hit,writedate,
        sido,ch_pattern,ch_start,ch_end
        )
        VALUES(
        #{r_idx}, #{member_name}, #{type_pc}, #{title},#{teamname},
        #{cont},0,sysdate,#{sido},#{ch_pattern},#{ch_start},#{ch_end})
    </insert>

    <!--5-1 글목록 페이징 + 댓글 조인 + 최신순 + 마감제외없음-->
    <insert id="insertTag">
        INSERT INTO LANG (R_IDX, LANG_NAME)
        VALUES (#{r_idx}, #{tag})
    </insert>

    <!--5-1-1 글목록 페이징 + 댓글 조인 + 최신순 + 마감제외없음 + 검색기능-->
    <insert id="insertApply">
        INSERT INTO APPLY_MEMBER (APPLY_IDX, R_IDX, MEMBER_NAME, STUDY_JOIN_ARCIWF, STUDY_JOIN_CHANGE_DATE,
                                  STUDY_BOSS_YN, ATTENDANCE_DAYS)
        VALUES (
               )
    </insert>

    <!--5-3 글목록 페이징 + 댓글 조인 + 최신순 + 마감제외-->
    <insert id="insertReply">
        <selectKey keyProperty="no" order="BEFORE" resultType="int">
            SELECT REPLY_SQE.NEXTVAL
            FROM dual
        </selectKey>
        INSERT INTO REPLY (
        no,r_idx,member_name,c_cont,c_date,removed_ok
        )
        VALUES(
        #{no}, #{r_idx}, #{member_name}, #{c_cont},sysdate,'n'
        )
    </insert>

    <!--//5-2 글목록 페이징 + 댓글 조인+ 인기순 + 마감제외없음-->
    <select id="getList" resultType="kr.or.ssff.study.domain.RecruitBoardVO">
    <![CDATA[
        SELECT
            /*+ index_desc(recruit_board) */
            R_IDX,
            MEMBER_NAME,
            TYPE_PC,
            TITLE,
            TEAMNAME,
            CONT,
            HIT,
            WRITEDATE,
            SIDO,
            CH_PATTERN,
            CH_START,
            CH_END,
            REMOVED_OK,
            CLOSED_OK,
            DEAD_OK
        FROM RECRUIT_BOARD
        WHERE R_IDX < 1000
          AND TYPE_PC = #{type}
          AND REMOVED_OK = 'n'
        OFFSET (#{page} - 1) * 15 ROW FETCH NEXT 15 ROWS ONLY
        ]]>
  </select>

    <!--5-4 글목록 페이징 + 댓글 조인+ 인기순 + 마감제외-->
    <select id="getListWithJoinReply" resultType="kr.or.ssff.study.domain.RecruitBoardJoinReplyVO">
    <![CDATA[
        SELECT b.R_IDX,
               MEMBER_NAME,
               TYPE_PC,
               TITLE,
               TEAMNAME,
               CONT,
               HIT,
               WRITEDATE,
               SIDO,
               CH_PATTERN,
               CH_START,
               CH_END,
               REMOVED_OK,
               CLOSED_OK,
               DEAD_OK,
               NVL(counting, 0) AS reply_count
        FROM RECRUIT_BOARD b
                 LEFT JOIN (SELECT R_IDX, COUNT(R_IDX) AS counting FROM REPLY GROUP BY R_IDX) r
                           ON b.R_IDX = r.R_IDX
        WHERE b.R_IDX < 1000
          AND TYPE_PC = #{type}
          AND REMOVED_OK = 'n'
        ORDER BY b.R_IDX DESC
        OFFSET (#{page} - 1) * 15 ROW FETCH NEXT 15 ROWS ONLY
        ]]>
  </select>


    <!--가장 최근에 쓴 게시글 번호 가져오기-->
    <select id="getListWithJoinReplyAddSearch" resultType="kr.or.ssff.study.domain.RecruitBoardJoinReplyVO">
    <![CDATA[
        SELECT b.R_IDX,
               MEMBER_NAME,
               TYPE_PC,
               TITLE,
               TEAMNAME,
               CONT,
               HIT,
               WRITEDATE,
               SIDO,
               CH_PATTERN,
               CH_START,
               CH_END,
               REMOVED_OK,
               CLOSED_OK,
               DEAD_OK,
               NVL(counting, 0) AS reply_count,
               nonblank_sido,
               nonblank_pattern
        FROM (
                 SELECT R_IDX,
                        MEMBER_NAME,
                        TYPE_PC,
                        TITLE,
                        TEAMNAME,
                        CONT,
                        HIT,
                        WRITEDATE,
                        SIDO,
                        CH_PATTERN,
                        CH_START,
                        CH_END,
                        REMOVED_OK,
                        CLOSED_OK,
                        DEAD_OK,
                        REPLACE(SIDO, ' ', '')       AS nonblank_sido,
                        REPLACE(CH_PATTERN, ' ', '') AS nonblank_pattern
                 FROM RECRUIT_BOARD
             ) b
                 LEFT JOIN (
            SELECT R_IDX, COUNT(R_IDX) AS counting
            FROM REPLY
            GROUP BY R_IDX
        ) r
                           ON b.R_IDX = r.R_IDX
        WHERE b.R_IDX < 1000
          AND TYPE_PC = #{type}
          AND REMOVED_OK = 'n'
          AND (nonblank_sido LIKE #{text} OR nonblank_pattern LIKE #{text})
        ORDER BY b.R_IDX DESC
        OFFSET (#{page} - 1) * 15 ROW FETCH NEXT 15 ROWS ONLY
        ]]>
  </select>

    <!--게시글 번호로 언어 태그 등록하기-->
    <select id="getListWithJoinReplyExceptClosed" resultType="kr.or.ssff.study.domain.RecruitBoardJoinReplyVO">
    <![CDATA[
        SELECT b.R_IDX,
               MEMBER_NAME,
               TYPE_PC,
               TITLE,
               TEAMNAME,
               CONT,
               HIT,
               WRITEDATE,
               SIDO,
               CH_PATTERN,
               CH_START,
               CH_END,
               REMOVED_OK,
               CLOSED_OK,
               DEAD_OK,
               NVL(counting, 0) AS reply_count
        FROM RECRUIT_BOARD b
                 LEFT JOIN (SELECT R_IDX, COUNT(R_IDX) AS counting FROM REPLY GROUP BY R_IDX) r
                           ON b.R_IDX = r.R_IDX
        WHERE b.R_IDX < 1000
          AND TYPE_PC = #{type}
          AND REMOVED_OK = 'n'
          AND CLOSED_OK = 'n'
        ORDER BY b.R_IDX DESC
        OFFSET (#{page} - 1) * 15 ROW FETCH NEXT 15 ROWS ONLY
        ]]>
  </select>

    <!--lang list 전체 가져오기-->
    <select id="getListWithJoinReplyOrderByHit" resultType="kr.or.ssff.study.domain.RecruitBoardJoinReplyVO">
    <![CDATA[
        SELECT b.R_IDX,
               MEMBER_NAME,
               TYPE_PC,
               TITLE,
               TEAMNAME,
               CONT,
               HIT,
               WRITEDATE,
               SIDO,
               CH_PATTERN,
               CH_START,
               CH_END,
               REMOVED_OK,
               CLOSED_OK,
               DEAD_OK,
               NVL(counting, 0) AS reply_count
        FROM RECRUIT_BOARD b
                 LEFT JOIN (SELECT R_IDX, COUNT(R_IDX) AS counting FROM REPLY GROUP BY R_IDX) r
                           ON b.R_IDX = r.R_IDX
        WHERE b.R_IDX < 1000
          AND TYPE_PC = #{type}
          AND REMOVED_OK = 'n'
        ORDER BY HIT DESC
        OFFSET (#{page} - 1) * 15 ROW FETCH NEXT 15 ROWS ONLY
        ]]>
  </select>

    <!--글 하나 가져오기-->
    <select id="getListWithJoinReplyOrderByHitExceptClosed"
            resultType="kr.or.ssff.study.domain.RecruitBoardJoinReplyVO">
    <![CDATA[
        SELECT b.R_IDX,
               MEMBER_NAME,
               TYPE_PC,
               TITLE,
               TEAMNAME,
               CONT,
               HIT,
               WRITEDATE,
               SIDO,
               CH_PATTERN,
               CH_START,
               CH_END,
               REMOVED_OK,
               CLOSED_OK,
               DEAD_OK,
               NVL(counting, 0) AS reply_count
        FROM RECRUIT_BOARD b
                 LEFT JOIN (SELECT R_IDX, COUNT(R_IDX) AS counting FROM REPLY GROUP BY R_IDX) r
                           ON b.R_IDX = r.R_IDX
        WHERE b.R_IDX < 1000
          AND TYPE_PC = #{type}
          AND REMOVED_OK = 'n'
          AND CLOSED_OK = 'n'
        ORDER BY HIT DESC
        OFFSET (#{page} - 1) * 15 ROW FETCH NEXT 15 ROWS ONLY
        ]]>
  </select>

    <!--lang list 전체 가져오기-->
    <select id="getCurrentR_idx" resultType="int">
<![CDATA[
        SELECT MAX(R_IDX)
        FROM RECRUIT_BOARD
        WHERE R_IDX < 1000
        ]]>
  </select>

    <!--Apply insert문 (제작중)-->
    <select id="getLangList" resultType="kr.or.ssff.study.domain.LangVO">
        SELECT R_IDX, LANG_NAME
        FROM LANG
    </select>

    <!--update문-->
    <select id="get" resultType="kr.or.ssff.study.domain.RecruitBoardVO">
    <![CDATA[
        SELECT R_IDX,
               MEMBER_NAME,
               TYPE_PC,
               TITLE,
               TEAMNAME,
               CONT,
               HIT,
               WRITEDATE,
               SIDO,
               CH_PATTERN,
               CH_START,
               CH_END,
               REMOVED_OK,
               CLOSED_OK,
               DEAD_OK
        FROM RECRUIT_BOARD
        WHERE R_IDX = #{r_idx}
        ]]>
  </select>

    <!--언어태그 삭제하기-->
    <select id="getLangTags" resultType="kr.or.ssff.study.domain.LangVO">
        SELECT R_IDX, LANG_NAME
        FROM LANG
        WHERE R_IDX = #{r_idx}
    </select>

    <!--글 조회수 늘리기-->
    <select id="getReplyList" resultType="kr.or.ssff.study.domain.ReplyVO">
        SELECT
            /*+ index_asc(reply) */
            NO,
            R_IDX,
            MEMBER_NAME,
            C_CONT,
            C_DATE,
            REMOVED_OK
        FROM REPLY
        WHERE R_IDX = #{r_idx}
          AND REMOVED_OK = 'n'
    </select>

    <!--댓글 등록하기-->
    <select id="getPostCount" resultType="int">
    <![CDATA[
        SELECT COUNT(R_IDX)
        FROM RECRUIT_BOARD
        WHERE REMOVED_OK = 'n'
          AND TYPE_PC = #{type}
        ]]>
  </select>
    <!--댓글 가져오기-->
    <select id="getPostCountExceptClosed" resultType="int">
    <![CDATA[
        SELECT COUNT(R_IDX)
        FROM RECRUIT_BOARD
        WHERE REMOVED_OK = 'n'
          AND TYPE_PC = #{type}
          AND CLOSED_OK = 'n'
        ]]>
  </select>

    <!--글삭제-->
    <select id="getPostCountAddSearch" resultType="int">
    <![CDATA[
        SELECT COUNT(R_IDX)
        FROM (SELECT R_IDX,
                     MEMBER_NAME,
                     TYPE_PC,
                     TITLE,
                     TEAMNAME,
                     CONT,
                     HIT,
                     WRITEDATE,
                     SIDO,
                     CH_PATTERN,
                     CH_START,
                     CH_END,
                     REMOVED_OK,
                     CLOSED_OK,
                     DEAD_OK,
                     REPLACE(SIDO, ' ', '')       AS nonblank_sido,
                     REPLACE(CH_PATTERN, ' ', '') AS nonblank_pattern
              FROM RECRUIT_BOARD)
        WHERE REMOVED_OK = 'n'
          AND TYPE_PC = #{type}
          AND (nonblank_sido LIKE #{text} OR nonblank_pattern LIKE #{text})
        ]]>
  </select>

    <!--댓글삭제-->
    <select id="getPostCountAddLogo" resultType="int">
        SELECT
        count(b.r_idx)
        FROM recruit_board b
        left join (
        select r_idx, count(r_idx) as counting from reply group by r_idx
        ) r
        on b.r_idx = r.r_idx
        WHERE type_pc='P' and removed_ok='n'
        and b.r_idx in(select r_idx
        from lang
        where lang_name in
        <foreach close=")" collection="arr" index="index" item="arr" open="(" separator=",">
            #{arr}
        </foreach>
        group by r_idx)
        ORDER BY b.r_idx DESC
    </select>

    <!--댓글수정-->
    <select id="replyCount" resultType="kr.or.ssff.study.domain.ReplyCountVO">
<![CDATA[
        SELECT R_IDX, COUNT(NO) AS counting
        FROM REPLY
        GROUP BY R_IDX
        ]]>
  </select>

    <!--게시글 수 세기-->
    <select id="replyCountByR_idx" resultType="int">
<![CDATA[
        SELECT COUNT(R_IDX)
        FROM REPLY
        WHERE R_IDX = #{r_idx}
        ]]>
  </select>

    <!--게시글 수 세기(마감 제외)-->
    <select id="getR_idxListUsingLogoset" parameterType="java.util.List" resultType="int">
        select r_idx
        from lang
        where lang_name IN
        <foreach close=")" collection="array" item="arr" open="(" separator=",">
            #{arr}
        </foreach>
        group by r_idx
    </select>

    <!--글 총갯수 구하기(타입 받음)+검색어-->
    <select id="getListWithJoinReplyAddLogo" resultType="kr.or.ssff.study.domain.RecruitBoardJoinReplyVO">
        SELECT
        b.r_idx, member_name, type_pc, title,
        teamname,cont,hit,writedate,sido,
        ch_pattern,ch_start,ch_end,removed_ok,closed_ok,dead_ok,
        nvl(counting,0) as reply_count
        FROM recruit_board b
        left join (
        select r_idx, count(r_idx) as counting from reply group by r_idx
        ) r
        on b.r_idx = r.r_idx
        WHERE type_pc='P' and removed_ok='n'
        and b.r_idx in(select r_idx
        from lang
        where lang_name in
        <foreach close=")" collection="arr" index="index" item="arr" open="(" separator=",">
            #{arr}
        </foreach>
        group by r_idx)
        ORDER BY b.r_idx DESC
        OFFSET (#{page}-1)*15 ROW
        FETCH NEXT 15 ROWS ONLY
    </select>
    <!--글 총갯수 구하기(타입 받음)+로고선택-->
    <update id="update">
        UPDATE RECRUIT_BOARD
        SET TITLE      = #{title},
            TEAMNAME   = #{teamname},
            CONT       = #{cont},
            SIDO       = #{sido},
            CH_PATTERN = #{ch_pattern},
            CLOSED_OK= #{closed_ok}
        WHERE R_IDX = #{r_idx}
    </update>

    <!--글번호&댓글 수 구하기-->
    <update id="hitUp">
        UPDATE RECRUIT_BOARD
        SET HIT =(SELECT NVL(MAX(HIT), 0) + 1 FROM RECRUIT_BOARD WHERE R_IDX = #{r_idx})
        WHERE R_IDX = #{r_idx}
    </update>

    <!--글번호에 해당하는 하나의 댓글 수 구하기-->
    <update id="delete">
        UPDATE RECRUIT_BOARD
        SET REMOVED_OK='y'
        WHERE R_IDX = #{r_idx}
    </update>

    <!--logoset을 쓰는 게시글 번호들을 받아오기 - 작동안함-->
    <update id="replyDelete">
        UPDATE REPLY
        SET REMOVED_OK='y'
        WHERE NO = #{no}
    </update>

    <!--글목록 페이징 + 댓글 조인 + 최신순 + 마감제외없음 + 로고조회기능-->
    <update id="replyUpdate">
        UPDATE REPLY
        SET C_CONT=#{c_cont}
        WHERE NO = #{no}
    </update>

    <!--상준 : 출석 내역 테이블에 기록 남기기 -->
    <insert id="updateAttendance" parameterType="java.util.HashMap">
    <![CDATA[
        INSERT INTO ATTENDANCELIST(AT_NO, AT_DAY, R_IDX, MEMBER_NAME)
        VALUES (ATTENDANCELIST_SEQ.nextval, TO_CHAR(CURRENT_DATE, 'yyyy-MM-dd'), #{map.r_Idx}, #{map.member_name})
        ]]>
  </insert>

    <!--출석내역 누적 +1-->
    <update id="updateTotalAttendance" parameterType="hashMap">
        UPDATE APPLY_MEMBER
        SET ATTENDANCE_DAYS=NVL(ATTENDANCE_DAYS + 1, 0)
        WHERE MEMBER_NAME = #{map.member_name}
          AND R_IDX = #{map.r_Idx}
    </update>

    <!--하루에 한번 출석하도록 하는 xml입니다-->
    <select id="attendanceOkOneByOne" parameterType="hashMap" resultType="integer">
        SELECT count(AT_NO)
        FROM ATTENDANCELIST
        WHERE R_IDX = #{map.r_Idx}
          AND MEMBER_NAME = #{map.member_name}
          AND AT_DAY = TO_CHAR(CURRENT_DATE, 'yyyy-MM-dd')
    </select>

    <!--가입여부 확인-->
    <select id="getMemberByR_idx" resultType="kr.or.ssff.applyMember.domain.ApplyMemberDTO">
        SELECT apply_idx, r_idx, member_name
        FROM apply_member
        WHERE r_idx=#{r_idx}
    </select>

    <select id="getTeamName" resultType="kr.or.ssff.applyMember.domain.ApplyMemberDTO">
        SELECT R_IDX, MEMBER_NAME, TYPE_PC, TITLE, TEAMNAME, CONT, HIT, WRITEDATE, SIDO, CH_PATTERN, CH_START, CH_END, REMOVED_OK, CLOSED_OK, DEAD_OK
        FROM RECRUIT_BOARD RB   WHERE RB.R_IDX=${r_Idx}
    </select>
</mapper>


